openapi: 3.0.0
info:
  title: Admin Management API
  version: 1.0.0
  description: Admin Management API
servers:
  - url: "/api/s1"
    description: local and codespaces

tags:
  - name: admins
    description: admin management s1

paths:
  /admins/login:
    post:
      tags:
        - admins
      summary: "Login admin with attempt tracking - author: @alberto"
      description: |
        **Story:** As a registered administrator, I want to log into the system securely, with the system tracking login attempts to prevent unauthorized access.

        **Happy Paths:**
        - Given valid credentials, when the admin logs in, they are granted access to the system, and the login attempt is recorded.

        **Alternative Paths:**
        - If the admin enters incorrect credentials, the system records the attempt and displays an error message: "Invalid credentials. Please try again."
        - If the admin fails to log in 3 times consecutively, the system blocks the account temporarily and they receive a message: "Your account has been blocked due to multiple failed login attempts. Please reset your password."
        - If the login attempt is successful after one or two attempts, the system resets the attempt counter back to zero.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                required:
                  - admin_id
                type: object
                properties:
                  admin_id:
                    type: string
        "401":
          description: Invalid credentials. Please try again.
        "423":
          description: >-
            Your account has been blocked due to multiple failed login attempts. Please reset your
            password
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
  /admins/{id}/deactivate:
    put:
      tags:
        - admins
      summary: "Deactivate an admin - author: @alberto"
      description: |
        **Story:** As an administrator with appropriate permissions, I want to soft delete an admin account so that it's no longer active but the data is preserved for potential future recovery.

        **Happy Paths:**
        - Given a logged-in admin with appropriate permissions, when the admin selects to deactivate another admin account, the system marks the account as inactive (soft delete) without deleting it from the database.
        - The system logs this action with the encrypted details of both the acting admin and the deactivated admin.
        - The system sends an email notification to all active admins, informing them of the account deactivation.
        - The system records the time and details of the deactivation log.

        **Alternative Paths:**
        - If the admin doesn't have appropriate permissions, the system shows an error message: "You don't have permission to perform this action."
        - If there's an issue with the deactivation process, the system displays an error: "Unable to deactivate the account. Please try again later."
        - If the admin attempts to deactivate their own account, the system displays a warning: "You cannot deactivate your own account."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                admin_id:
                  type: string
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Deactivation successful
        "400":
          description: You cannot deactivate your own account.
        "403":
          description: You don't have permission to perform this action.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
  /admins/{id}/profile:
    put:
      summary: Update admin profile (tester:@Georgy29)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                full_name:
                  type: string
                bio:
                  type: string
                profile_photo:
                  type: string
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Profile updated successfully
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized action
  /admins:
    get:
      summary: "Get a list of admins - tester @alberto"
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        "401":
          description: You are not authorized to view this resource
  /admins/status-notifications:
    post:
      summary: Send status notifications to admins (tester:@Georgy29)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                affected_admin_id:
                  type: string
                changed_by_admin_id:
                  type: string
      responses:
        "200":
          description: Notification sent successfully to all active admins
        "400":
          description: Invalid action type
        "401":
          description: You are not authorized to perform this action
        "422":
          description: Email delivery failed
  /admins/password-reset:
    get:
      tags: 
        - admins
      summary: Validate password reset token (author:@Georgy29) (tester @alberto") 
      parameters:
        - in: query
          name: token
          schema:
            type: string
          required: true
          description: Token to be validated

      responses:
        "200":
          description: Valid token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessObject"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          userId:
                            type: string
                          additionalInfo:
                            type: string
              examples:
                successExample:
                  summary: Valid token example
                  value:
                    status: "success"
                    messages:
                      - "Token is valid. Proceed with password reset."
                    data:
                      userId: "12345"
                      additionalInfo: "Sample additional data (expiry_date)"
        "400":
          description: Invalid or expired token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
              example:
                value:
                  status: "error"
                  errors:
                    - "The provided token is invalid or expired."
                    - "Please request a new password reset."
                  locations:
                    - "admins.controller.js"
                    - "admins.service.js"
                    - "admins.database.js"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
    put:
      tags:
        - admins
      summary: Reset the user's password (with a valid token) (author:@Georgy29) (tester @alberto")
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                new_password:
                  type: string
                  description: The new password to be set for the user
                  minLength: 8
                  maxLength: 64
      responses:
        "200":
          description: Password reset successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessObject"
              examples:
                successExample:
                  summary: Success message for successful password reset
                  value:
                    status: "success"
                    messages:
                      - "Password reset successfully."
                      - "You can now log in with your new password."
        "400":
          description: Invalid or expired token, or password does not meet complexity requirements.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
              examples:
                invalidTokenExample:
                  summary: Invalid token example
                  value:
                    status: "error"
                    errors:
                      - "The token provided is invalid or expired."
                      - "Please check the token and try again."
                    locations:
                      - "admins.controller.js"
                      - "admins.service.js"
                complexityErrorExample:
                  summary: Password complexity error example
                  value:
                    status: "error"
                    errors:
                      - "Password does not meet complexity requirements."
                      - "Ensure the password is at least 8 characters long and contains a mix of letters, numbers, and symbols."
                    locations:
                      - "admins.controller.js"
                      - "admins.service.js"
                      - "admins.database.js"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
    post:
      tags: 
        - admins
      summary: Request a password reset link to an email (author:@Georgy29)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address for which the password reset is requested.
                  format: email
      responses:
        "200":
          description: Check your email for a password reset link.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessObject"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                            example: "Check your email for the password reset link."
              examples:
                successExample:
                  summary: Success message for requesting a password reset
                  value:
                    status: "success"
                    messages:
                      - "Check your email for the password reset link."
        "400":
          description: Email address not found or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
              examples:
                notFoundExample:
                  summary: Email address not found example
                  value:
                    status: "error"
                    errors:
                      - "The email address provided is not associated with any account."
                    locations:
                      - "admins.controller.js"
                      - "admins.service.js"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"

  /admin/logs:
    get:
      summary: Get admin logs
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
        - name: user
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        "401":
          description: You are not authorized to view this resource
        "500":
          description: Unable to retrieve logs. Please try again later.
  /admin/export:
    get:
      summary: "Export admin data - tester @alberto"
      parameters:
        - name: format
          in: query
          required: true
          schema:
            type: string
            enum: [csv]
      responses:
        "200":
          description: Export generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  download_url:
                    type: string
        "400":
          description: Invalid export configuration
        "500":
          description: Unable to generate export. Please try again later.
  /admin/import:
    put:
      summary: Import admin data
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: Import successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  summary:
                    type: object
                    properties:
                      total:
                        type: integer
                      successful:
                        type: integer
                      failed:
                        type: integer
        "400":
          description: Invalid file format
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        row:
                          type: integer
                        message:
                          type: string
        "413":
          description: File size exceeds limit
        "500":
          description: Import processing failed
  /admins/register:
    post:
      tags:
        - admins
      summary: "Register a new admin - author: @alberto, tester:@Georgy29" 
      description: |
        **Story:** As an administrator, I want to register using a verified code provided by the Galleria owners so that I can manage the gallery.

        **Happy Paths:**
        - Given a valid code, the system allows the admin to enter their full name, email, phone, password, and optional photo and bio.
        - The system enforces strong password requirements (e.g., minimum length, complexity).
        - The registration date is automatically recorded, and all other administrators are notified of the new registration.

        **Alternative Paths:**
        - If an invalid or expired code is entered, the system displays an error message: "Invalid or expired registration code."
        - If the registration code has already been used, the system informs the admin that the code is no longer valid.
        - If there's an issue while creating the account (e.g., server error), the system shows an error message: "Unable to register. Please try again later."
        - If the password doesn't meet the complexity requirements, the system provides specific feedback on what needs to be improved.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminData"
            examples:
              validRegistration:
                summary: Valid registration request
                value:
                  full_name: "John Smith"
                  email: "john.smith@example.com"
                  phone: "+1234567890"
                  password: "SecureP@ss123"
                  activation_code: "ABCD1234"
                  address: "123 Admin Street, City"
                  profile_photo: "https://example.com/photos/john.jpg"
                  bio: "Senior gallery administrator with 5 years experience"
              invalidEmail:
                summary: Invalid email format
                value:
                  full_name: "John Smith"
                  email: "invalid-email"
                  phone: "+1234567890"
                  password: "SecureP@ss123"
                  activation_code: "ABCD1234"
              invalidPassword:
                summary: Password doesn't meet requirements
                value:
                  full_name: "John Smith"
                  email: "john.smith@example.com"
                  phone: "+1234567890"
                  password: "weak"
                  activation_code: "ABCD1234"
              invalidActivationCode:
                summary: Invalid activation code format
                value:
                  full_name: "John Smith"
                  email: "john.smith@example.com"
                  phone: "+1234567890"
                  password: "SecureP@ss123"
                  activation_code: "123"
              missingRequired:
                summary: Missing required fields
                value:
                  full_name: "John Smith"
                  email: "john.smith@example.com"
      responses:
        "201":
          description: Registration successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessObject"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          new_id:
                            type: string
                            description: "The ID of the newly registered admin"
              example:
                value:
                  data:
                    new_id: admin-123
                  messages:
                    - Registration successful
                  locations:
                    - admins.controller.js
                    - admins.service.js
                    - admins.database.js
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
              example:
                value:
                  status: "error"
                  errors:
                    - "Invalid or expired registration code"
                    - "Password does not meet complexity requirements"
                  locations:
                    - "admins.controller.js"
                    - "admins.service.js"
                    - "admins.database.js"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
components:
  schemas:
    AdminData:
      type: object
      properties:
        full_name:
          type: string
          minLength: 2
          maxLength: 100
          description: "Full name of the administrator"
        email:
          type: string
          format: email
          description: "Email address of the administrator"
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
          description: "Phone number in international format"
        password:
          type: string
          format: password
          minLength: 8
          description: "Admin password - must be at least 8 characters with mix of letters, numbers and symbols"
        address:
          type: string
          maxLength: 200
          description: "Physical address"
        activation_code:
          type: string
          pattern: "^[A-Z0-9]{8}$"
          description: "8-character activation code provided by Galleria owners"
        profile_photo:
          type: string
          format: uri
          description: "URL to profile photo"
        bio:
          type: string
          maxLength: 500
          description: "Admin biography or description"
      required:
        - full_name
        - email
        - phone
        - password
        - activation_code
ErrorObject:
    type: object
    properties:
        status:
            type: string
            description: "error"
        errors:
            type: array
            items:
                type: string
            description: "Error messages"
            example: ["invalid", "not available"]
        locations:
            type: array
            items:
                type: string
            description: "Optional: Additional information about the location of each message"
            example: ["db.js", "service.js"]
SuccessObject:
      type: object
      properties:
        locations:
          type: array
          items:
            type: string
          description: "Optional tracking locations related to the data"
          example: ["tracking location optional"]
        messages:
          type: array
          items:
            type: string
          description: "Messages that provide additional information about the response"
          example: ["tracking location optional"]
