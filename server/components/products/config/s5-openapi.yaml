openapi: 3.0.0
info:
  title: Product API
  version: 1.0.0
servers:
  - url: "/api/s5"
    description: local and codespaces
paths:
  /products:
    get:
      summary: Get all products
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  id:
                    type: string
                  name:
                    type: string
                  short_description:
                    type: string
        "401":
          description: Unauthorized
    post:
      tags:
        - products
      summary: "Create a new product (author: @Alona)"
      description: As an admin, I would like to add a new product, so that I could manage a product catalogue.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - category_id
                - name
                - short_description
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 100
                  example: Wireless RGB Keyboard
                category_id:
                  type: integer
                  nullable: true
                  example: 54
                category_name:
                  type: string
                  minLength: 3
                  maxLength: 100
                  nullable: true
                  example: Keyboards
                short_description:
                  type: string
                  minLength: 20
                  maxLength: 1000
                  example: Experience seamless typing with this wireless RGB keyboard, featuring customizable backlighting, ergonomic design, and reliable connectivity for a smooth and vibrant typing experience.
                detailed_description:
                  type: string
                  maxLength: 10000
                  nullable: true
                  example: Upgrade your typing experience with this wireless RGB keyboard, combining style and functionality. With customizable RGB lighting, an ergonomic design, and quiet, responsive keys, it ensures a smooth typing experience whether you're working or gaming. Benefit from stable wireless connectivity, extended battery life, and a sleek, vibrant design that enhances any workspace.
                product_photos:
                  type: array
                  nullable: true
                  items:
                    type: string
                    format: uri
                    example: https://www.youtube.com/photo.jpg
                product_url:
                  type: string
                  nullable: true
                  format: uri
                  example: https://youtu.be/0LE0trd740Q
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  id:
                    type: string
                  name:
                    type: string
                  category_id:
                    type: string
                  category_name:
                    type: string
                  short_description:
                    type: string
                  detailed_description:
                    type: string
                  product_photos: #product photos may not be needed here, as there is a table for photos
                    type: array
                    items:
                      type: string
                  product_url:
                    type: string
        "400":
          description: Please fill in all the required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
        default:
         description: Unexpected error
         content:
             application/json:
                 schema:
                  $ref: "#/components/schemas/ErrorObject"

  /products/{product_id}/tags:
    post:
      summary: Add tags to a product
      parameters:
        - in: path
          name: product_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  id:
                    type: string
        "401":
          description: Unauthorized
        "404":
          description: Tag not found

  /products/{product_id}/price:
    post:
      summary: Update product price
      parameters:
        - in: path
          name: product_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPrice:
                  type: number
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  id:
                    type: string
                  newprice:
                    type: number
        "401":
          description: Unauthorized

  /products/{product_id}/inventory:
    post:
      summary: Update product inventory
      parameters:
        - in: path
          name: product_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stock_quantity:
                  type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  id:
                    type: string
                  stock_quantity:
                    type: integer
        "401":
          description: Unauthorized

  /products/bulk-edit:
    post:
      summary: Bulk edit products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                      title:
                        type: string
                      description:
                        type: string
                      price:
                        type: number
                      category:
                        type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  updated_products_count:
                    type: integer
        "401":
          description: Unauthorized

  /products/{id}/expiration-date:
    put:
      summary: Update product expiration date
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                expiration_date:
                  type: string
                  format: date
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  expiration_date_updated:
                    type: boolean
        "401":
          description: Unauthorized

  /products/{id}/discount:
    put:
      summary: Apply a discount to a product
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                discount_value:
                  type: number
                discount_type:
                  type: string
                  enum: [percentage, fixed]
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  new_discount_applied:
                    type: boolean
        "401":
          description: Unauthorized

  /products/{product_id}/photos:
    post:
      tags:
        - products
      summary: "Add photos to a product (author: @Alona)"
      description: As an admin, I would like to optionally add a gallery of up to 5 photos, which are up to 1 MB each, to a product for quick visual recognition.
      parameters:
        - in: path
          name: product_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                photos:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  id:
                    type: string
        "401":
          description: Unauthorized
        default:
         description: Unexpected error
         content:
             application/json:
                 schema:
                  $ref: "#/components/schemas/ErrorObject"
    get:
      tags:
        - products
      summary: "Get photos of a product (author: @Alona)"
      parameters:
        - in: path
          name: product_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  id:
                    type: string
        "401":
          description: Unauthorized
        "404":
          description: Not found
        default:
         description: Unexpected error
         content:
             application/json:
                 schema:
                  $ref: "#/components/schemas/ErrorObject"


  /tags:
    get:
      summary: Retrieve tags for a specific product
      parameters:
        - name: product_id
          in: query
          required: true
          schema:
            type: string
          description: The ID of the product to retrieve tags for
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  tags:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string

        "401":
          description: Unauthorized

        "404":
          description: Product not found

    post:
      summary: Create a new tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the new tag
              required:
                - name
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  id:
                    type: string
                    description: The ID of the newly created tag

        "401":
          description: Unauthorized
components:
     schemas:
         ErrorObject:
             type: object
             properties:
                 status:
                     type: string
                     description: "error"
                 errors:
                     type: array
                     items:
                         type: string
                     description: "Error messages"
                     example: ["invalid", "not available"]
                 locations:
                     type: array
                     items:
                         type: string
                     description: "Optional: Additional information about the location of each message"
                     example: ["db.js", "service.js"]
