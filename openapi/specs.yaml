openapi: 3.0.0
info:
  title: Galleria Dashboard
  version: 1.0.0
  description: Galleria Dashboard API
  contact:
    name: fatma-meawad
servers:
  - url: '/api'
    description: local and codespaces
  - url: 'http://localhost:5000/api'
    description: localhost 
 
tags:
  - name: admins
    description: admin management s1
  - name: adminlogs
    description: Logs of admins actions
  - name: chat-logs
    description: Messages between admins
  - name: accounts
    description: Operations related to business and sellers accounts
  - name: products
    description: Product management
  - name: messages
    description: Messages between admins
  - name: categories
    description: Managing Categories

paths:

  /s1/admins/login:
    post:
      tags:
        - admins
      summary: >-
        Login admin with attempt tracking - author: @alberto - tester:
        @johnhammer, @Alona
      description: >
        **Story:** As a registered administrator, I want to log into the system
        securely, with the system tracking login attempts to prevent
        unauthorized access.


        **Happy Paths:**

        - Given valid credentials, when the admin logs in, they are granted
        access to the system, and the login attempt is recorded.


        **Alternative Paths:**

        - If the admin enters incorrect credentials, the system records the
        attempt and displays an error message: "Invalid credentials. Please try
        again."

        - If the admin fails to log in 3 times consecutively, the system blocks
        the account temporarily and they receive a message: "Your account has
        been blocked due to multiple failed login attempts. Please reset your
        password."

        - If the login attempt is successful after one or two attempts, the
        system resets the attempt counter back to zero.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: '#/components/schemas/AdminData/properties/email'
                password:
                  $ref: '#/components/schemas/AdminData/properties/password'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                required:
                  - admin_id
                type: object
                properties:
                  admin_id:
                    type: string
        '400':
          description: Invalid credentials. Please try again.
        '423':
          description: >-
            Your account has been blocked due to multiple failed login attempts.
            Please reset your password
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'


  /s1/admins/{id}:
    put:
      summary: "Update admin profile author:@Maja tester:@Georgy29"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - full_name
                - bio
              properties:
                full_name:
                  type: string
                  example: "Maja Rak"
                bio:
                  type: string
                  example: "Admin with 5 years of experience."
                profile_photo:
                  type: string
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessObject"
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized action
  /s1/admins/password-reset:
    get:
      tags:
        - admins
      summary: >-
        Validate password reset token (author:@Georgy29) (tester @alberto")
        (reviewer:@Alona) (reviewer:@Jany-M, @PietroLauria)
      parameters:
        - in: query
          name: token
          schema:
            type: string
          required: true
          description: Token to be validated
      responses:
        '200':
          description: Valid token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessObject'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          userId:
                            type: string
                          additionalInfo:
                            type: string
              examples:
                successExample:
                  summary: Valid token example
                  value:
                    status: success
                    messages:
                      - Token is valid. Proceed with password reset.
                    data:
                      userId: '12345'
                      additionalInfo: Sample additional data (expiry_date)
        '400':
          description: Invalid or expired token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
              example:
                value:
                  status: error
                  errors:
                    - The provided token is invalid or expired.
                    - Please request a new password reset.
                  locations:
                    - admins.controller.js
                    - admins.service.js
                    - admins.database.js
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
    put:
      tags:
        - admins
      summary: >-
        Reset the user's password (with a valid token) (author:@Georgy29)
        (tester @alberto") (reviewer:@Alona)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                new_password:
                  type: string
                  description: The new password to be set for the user
                  minLength: 8
                  maxLength: 64
      responses:
        '200':
          description: Password reset successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessObject'
              examples:
                successExample:
                  summary: Success message for successful password reset
                  value:
                    status: success
                    messages:
                      - Password reset successfully.
                      - You can now log in with your new password.
        '400':
          description: >-
            Invalid or expired token, or password does not meet complexity
            requirements.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
              examples:
                invalidTokenExample:
                  summary: Invalid token example
                  value:
                    status: error
                    errors:
                      - The token provided is invalid or expired.
                      - Please check the token and try again.
                    locations:
                      - admins.controller.js
                      - admins.service.js
                complexityErrorExample:
                  summary: Password complexity error example
                  value:
                    status: error
                    errors:
                      - Password does not meet complexity requirements.
                      - >-
                        Ensure the password is at least 8 characters long and
                        contains a mix of letters, numbers, and symbols.
                    locations:
                      - admins.controller.js
                      - admins.service.js
                      - admins.database.js
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /s1/admins:
   get:
    operationId: getAdmins
    tags:
      - admins
    summary: "Retrieve a paginated list of administrators"
    description: |
      **Story:** As an administrator, I want to view a list of all admin accounts, 
      including their activation status (active or inactive), account creation date, 
      and deactivation time (if applicable), so I can manage and track the admin team effectively.
    parameters:
      - in: query
        name: page
        description: The page number for pagination, used to retrieve the corresponding set of admin records.
        schema:
          $ref: "#/components/schemas/PaginationPage"
      - in: query
        name: limit
        description: The maximum number of admin records to return per page.
        schema:
          $ref: "#/components/schemas/PaginationLimit"
    responses:
      '200':
        description: Successfully retrieved list of administrators.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminsListResponse"
      '400':
        description: Bad Request due to invalid parameters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorObject'
      '401':
        description: Unauthorized access.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorObject'
      '404':
        description: No administrators found.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorObject'
      '422':
        description: Unprocessable Entity due to validation errors.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorObject'
      '500':
        description: Unable to retrieve admin list due to a server error.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorObject'
      default:
        description: Unexpected error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorObject'
  /s1/admins/register:
    post:
      operationId: postAdminsRegister
      tags:
        - admins
      summary: >-
        Register a new admin - author: @alberto, (tester:@Georgy29,
        @PietroLauria) reviewer:@Iryna
      description: >
        **Story:** As an administrator, I want to register using a verified code
        provided by the Galleria owners so that I can manage the gallery.


        **Happy Paths:**

        - Given a valid code, the system allows the admin to enter their full
        name, email, phone, password, and optional photo and bio.

        - The system enforces strong password requirements (e.g., minimum
        length, complexity).

        - The registration date is automatically recorded, and all other
        administrators are notified of the new registration.


        **Alternative Paths:**

        - If an invalid or expired code is entered, the system displays an error
        message: "Invalid or expired registration code."

        - If the registration code has already been used, the system informs the
        admin that the code is no longer valid.

        - If there's an issue while creating the account (e.g., server error),
        the system shows an error message: "Unable to register. Please try again
        later."

        - If the password doesn't meet the complexity requirements, the system
        provides specific feedback on what needs to be improved.
      requestBody:
        required: true
        description: >
          Provide the required admin registration details including full name, email,
          phone number, and password. The activation code must be valid and unused.
          Optional fields include address, profile photo URL, and bio. Password must
          meet complexity requirements including minimum length and special characters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminData'
            examples:
              validRegistration:
                summary: Valid registration request
                value:
                  full_name: John Smith
                  email: john.smith@example.com
                  phone: '+1234567890'
                  password: SecureP@ss123
                  activation_code: ABCD1234
                  address: '123 Admin Street, City'
                  profile_photo: 'https://example.com/photos/john.jpg'
                  bio: Senior gallery administrator with 5 years experience
              invalidEmail:
                summary: Invalid email format
                value:
                  full_name: John Smith
                  email: invalid-email
                  phone: '+1234567890'
                  password: SecureP@ss123
                  activation_code: ABCD1234
              invalidPassword:
                summary: Password doesn't meet requirements
                value:
                  full_name: John Smith
                  email: john.smith@example.com
                  phone: '+1234567890'
                  password: weak
                  activation_code: ABCD1234
              invalidActivationCode:
                summary: Invalid activation code format
                value:
                  full_name: John Smith
                  email: john.smith@example.com
                  phone: '+1234567890'
                  password: SecureP@ss123
                  activation_code: '123'
              missingRequired:
                summary: Missing required fields
                value:
                  full_name: John Smith
                  email: john.smith@example.com
              exceededMaxLength:
                summary: Field exceeding maximum length
                value:
                  full_name: JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ
                  email: john.smith@example.com
                  phone: '+1234567890'
                  password: SecureP@ss123
                  activation_code: ABCD1234
              invalidPattern:
                summary: Invalid field patterns
                value:
                  full_name: John123
                  email: john.smith@example.com
                  phone: '123456'
                  password: SecureP@ss123
                  activation_code: ABCD1234
              invalidPhotoUrl:
                summary: Invalid profile photo URL
                value:
                  full_name: John Smith
                  email: john.smith@example.com
                  phone: '+1234567890'
                  password: SecureP@ss123
                  activation_code: ABCD1234
                  profile_photo: not-a-valid-url
              duplicateEmail:
                summary: Already registered email
                value:
                  full_name: Different Name
                  email: existing@example.com
                  phone: '+1234567891'
                  password: SecureP@ss123
                  activation_code: WXYZ5678
              expiredCode:
                summary: Expired activation code
                value:
                  full_name: John Smith
                  email: john@example.com
                  phone: '+1234567890'
                  password: SecureP@ss123
                  activation_code: EXPIRED1                  
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessObject'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: integer
                            format: int32
                            minimum: 1
                            maximum: 2147483647
                            description: The unique identifier of the registered admin
                          email:
                            type: string
                            format: email
                            maxLength: 255
                            description: The email address of the registered admin
                          full_name:
                            type: string
                            minLength: 2
                            maxLength: 100
                            pattern: '^[a-zA-Z\s.-]*$'
                            description: The full name of the registered admin
                        required:
                          - id
                          - email
                          - full_name
              example:
                value:
                  data:
                    id: 123
                    full_name: John Smith
                    email: john.smith@example.com
                    phone: '+1234567890'
                  messages:
                    - Registration successful
                  locations:
                    - admins.controller.js
                    - admins.service.js
                    - admins.database.js
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
              example:
                value:
                  status: error
                  errors:
                    - Invalid or expired registration code
                    - Password does not meet complexity requirements
                  locations:
                    - admins.controller.js
                    - admins.service.js
                    - admins.database.js
        '409':
          description: Conflict - Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
              example:
                value:
                  status: error
                  errors:
                    - Email already registered
                  locations:
                    - admins.controller.js
                    - admins.service.js
                    - admins.database.js
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /s2/categories:
    get:
      summary: >-
        Retrieves a list of all categories (author: @Wong Chung Man)
        (tester:@Jany-M) (reviewer: @Alona, @alberto, @PietroLauria)
      description: >-
        As an admin, I would like to retrieve categories, so that I can
        understand the general overall activity of each registered business.
      tags:
        - categories
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  result: Success
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  result: Unauthorized
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
    post:
      operationId: postCategories
      summary: >-
        Creates a new category (author: @Wong Chung Man, tester: @Alona, @Iryna,
        @PietroLauria) (reviewer:@Jany-M, @alberto)
      description: >-
        As an admin, I would like to create categories, so that I can understand
        the general overall activity of each registered business.
      tags:
        - categories
      parameters:
        - in: header
          name: auth
          description: Authorization token for getting access to the endpoint (optional)
          # required: true
          schema:
            type: string
            minLength: 1
            maxLength: 100000
            pattern: '^.*$'
          examples:
            validFormat:
              summary: Authorization token
              value: 1234
      requestBody:
        description: title, photo_url and description for the POST endpoint
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryRequestData"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseData"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                example:
                  result: Invalid input
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  result: Unauthorized
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  '/s2/categories/{id}':
    put:
      summary: 'Updates a category by ID (author: @Wong Chung Man) (reviewer:@Iryna)'
      description: >-
        As an admin, I would like to update categories, so that I can understand
        the general overall activity of each registered business.
      tags:
        - categories
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                title:
                  type: string
                photo_url:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                example:
                  id: 1
                  title: Eletronic appliances
                  photo_url: 'https://url.com/photo.jpg'
                  description: This is soemthing electrical.
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                example:
                  result: Invalid input
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  result: Unauthorized
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
    delete:
      summary: 'Deletes a category by ID (author: @Wong Chung Man, tester: @Alona)'
      description: >-
        As an admin, I would like to delete categories, so that I can understand
        the general overall activity of each registered business.
      tags:
        - categories
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                example:
                  id: 1
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                example:
                  result: Invalid input
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  result: Unauthorized
        '402':
          description: Cannot delete element with internal categories or elements
          content:
            application/json:
              schema:
                type: object
                example:
                  result: Cannot delete element with internal categories or elements
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /s3/messages:
    post:
      summary: >-
        Send a message tester:@PietroLauria (author: @Iryna) (reviewer: @Alona)
        (tester: @alberto)
      description: >-
        As an admin, I want to send messages to other admins in the system so
        that I can communicate.
      operationId: postMessages
      tags:
        - chat-logs
      parameters:
        - in: header
          name: auth
          description: An authorization token
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 100000
            pattern: '^.*$'
          examples:
            validFormat:
              summary: Example of a valid authorization token
              value: 'Bearer eyJ1c2VySWQiOjEsImVtYWlsIjoiam9obi5kb'
      requestBody:
        description: The request body contains the required fields to send a message, including sender_id, recipient_id, thread, and content.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sender_id:
                  $ref: '#/components/schemas/MessageData/properties/sender_id'
                recipient_id:
                  $ref: '#/components/schemas/MessageData/properties/recipient_id'
                thread:
                  $ref: '#/components/schemas/MessageData/properties/thread'
                content:
                  $ref: '#/components/schemas/MessageData/properties/content'
              required:
                - sender_id
                - recipient_id
                - thread
                - content
            examples:
              validMessage:
                value:
                  sender_id: 1
                  recipient_id: 2
                  thread: thread name
                  content: Hello!
      responses:
        '200':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageData'
              examples:
                successfulResponse:
                  value:
                    data:
                      id: 1
                      sender_id: 1
                      recipient_id: 2
                      thread: thread name
                      content: Hello!
                      time: '2024-11-08T19:18:53Z'
        '400':
          description: Input can't be empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /s3/adminlogs:
    get:
      operationId: getadminlogs
      summary: >-
        Retrieve admin logs Author: @PietroLauria (tester:@Jany-M) (Reviewer:
        @alberto)
      description: >-
        Fetches admin action logs with optional filters by admin ID, keyword,
        date range, and sorting options.
      tags:
        - adminlogs
      parameters:
        - name: admin_id
          in: query
          description: ID of the admin to filter logs by.
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 2147483647
        - name: keyword
          in: query
          description: Keyword to search for in log details.
          schema:
            type: string
            maxLength: 100
            pattern: '^.{0,100}$'
        - name: date_range
          in: query
          description: 'Date range filter in the format YYYY-MM-DD:YYYY-MM-DD.'
          schema:
            type: string
            maxLength: 21
            pattern: '^\d{4}-\d{2}-\d{2}:\d{4}-\d{2}-\d{2}$'
        - name: sort_by
          in: query
          description: Field to sort by.
          schema:
            type: string
            enum:
              - date
              - keyword
              - admin_id
        - name: order
          in: query
          description: 'Order of sorting, either ascending or descending.'
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: auth
          in: header
          description: Authorization token; for this assessment, we only check if it exists.
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 100000
            pattern: '^.*$'
          examples:
            validAuth:
              summary: Example of an auth token
              value: 'some-auth-token'      
      responses:
        '200':
          description: Logs retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    maxItems: 1000
                    items:
                      $ref: '#/components/schemas/AdminLog'
              examples:
                array_of_logs:
                  value:
                    data:
                      - id: 1
                        action_type: edit
                        admin_id: 101
                        message_id: 201
                        action_time: '2023-11-10T10:30:00Z'
                        details: Edited message content.
                      - id: 2
                        action_type: create
                        admin_id: 102
                        message_id: 202
                        action_time: '2023-11-10T11:00:00Z'
                        details: Created new message.
        '400':
          description: Invalid query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - missing `auth` header.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errors:
                  - 'Unauthorized: missing `auth` header.'
        '404':
          description: No logs found for the specified criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /s4/businesses/:
    post:
      summary: >-
        Create a new business (author:@rbekkum) (tester:@Jany-M)
        (reviewer:@Alona) (reviewer:@Iryna, @PietroLauria)
      description: >-
        Allows admins to create a business account with detailed information
        about the business and the main owner.
      tags:
        - accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: The Western Group
                image:
                  type: string
                  example: 'https://example.com/image.jpg'
                phone:
                  type: string
                  example: 867-5309
                address:
                  type: string
                  example: 101 Elm Street
                web_address:
                  type: string
                  example: 'http://nightmareonelmstreet.com'
                description:
                  type: string
                  example: Yeahhh Baby
                main_owner_name:
                  type: string
                  example: Austin Powers
                main_owner_email:
                  type: string
                  example: apowers@mojo.com
                main_owner_phone:
                  type: string
                  example: 555-108-5555
              required:
                - title
                - image
                - phone
                - address
                - web_address
                - main_owner_name
                - main_owner_email
                - main_owner_phone
      responses:
        '201':
          description: Business created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  new_id:
                    type: string
                    example: '12345'
        '400':
          description: Invalid data provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
              examples:
                example-400:
                  summary: Invalid input data
                  value:
                    status: error
                    errors:
                      - Invalid email format for main_owner_email
                      - Phone number format is invalid
                    locations:
                      - businesses.controller.js
                      - businesses.services.js
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
    get:
      summary: >-
        Get list of businesses (author:@Jany-M) (tester:@rbekkum, @PietroLauria)
        (reviewer:@alberto)
      description: >-
        As an admin, I want to view all existing businesses, so that I can
        easily see their data and manage them effectively.
      tags:
        - accounts
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
          description: Number of items per page
        - name: offset
          in: query
          required: false
          schema:
            type: integer
          description: Offset for pagination
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  businesses:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        title:
                          type: string
                        image:
                          type: string
                        phone:
                          type: string
                        address:
                          type: string
                        web_address:
                          type: string
                        description:
                          type: string
                        main_owner_name:
                          type: string
                        main_owner_email:
                          type: string
                          format: email
                        main_owner_phone:
                          type: string
                        created_at:
                          type: integer
                        updated_at:
                          type: integer
                        is_active:
                          type: boolean
                        deactivated_at:
                          type: integer
                  pagination_info:
                    type: object
                    properties:
                      limit:
                        type: integer
                      offset:
                        type: integer
                      total_items:
                        type: integer
              examples:
                businesses-list:
                  summary: A list of businesses
                  value:
                    businesses:
                      - id: 1
                        title: Example Business
                        image: 'http://example.com/image.png'
                        phone: '+1234567890'
                        address: 123 Example Street
                        web_address: 'http://example.com'
                        description: An example business description
                        main_owner_name: John Doe
                        main_owner_email: john.doe@example.com
                        main_owner_phone: '+1234567890'
                        created_at: 12345678
                        updated_at: 12345678
                        is_active: true
                        deactivated_at: 12345678
                    pagination_info:
                      limit: 1
                      offset: 0
                      total_items: 1
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
              examples:
                example-400:
                  summary: Invalid request parameters
                  value:
                    error: Invalid request parameters
                    details:
                      - Limit must be a positive integer
                      - Offset must be a non-negative integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
              examples:
                example-401:
                  summary: Unauthorized access
                  value:
                    error: Unauthorized
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
              examples:
                example-403:
                  summary: Permission denied
                  value:
                    error: Permission denied
        '404':
          description: No businesses found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
              examples:
                example-404:
                  summary: No businesses found
                  value:
                    error: No businesses found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /s5/products:
    get:
      operationId: getProducts
      summary: >-
        Get all products (author: @Marika) (reviewer:@Jany-M, @alberto)
        (tester:@PietroLauria)
      description: >-
        As an Admin, I would like to view a list of products so that I can see
        the product catalog in an easy way.
      tags:
        - products
      parameters:
        - in: query
          name: limit
          description: The maximum number of results to return.
          schema:
            type: integer
            format: int32
            default: 20
            minimum: 1
            maximum: 100
          examples:
            validLimit:
              summary: Example of a valid limit
              value: 30
            invalidLimit:
              summary: Example of an invalid limit
              value: -5
        - in: query
          name: cursor
          description: |
            Use the cursor from the response to access more results.
          schema:
            type: string
            maxLength: 100
            minLength: 0
            pattern: '^.*$'
          examples:
            validCursor:
              summary: Example of a valid cursor
              value: 'eyJpZCI6MX0='
        - in: header
          name: auth
          description: An authorization token. Name is shortened due to OpenAPI issues with the name Authorization.
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 100000
            pattern: '^.*$'
          examples:
            validFormat:
              summary: Example of a valid authorization token
              value: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        maxItems: 50
                        items:
                          $ref: "#/components/schemas/ProductData"
                      page_info:
                        $ref: "#/components/schemas/PageInfo"
                    
              examples:
                products:
                  summary: A list of products
                  value:
                    data:
                      products:
                        - id: 1
                          name: Product 1
                          category_id: 1
                          short_description: Short description 1
                          detailed_description: Detailed description 1
                          product_url: 'https://example.com/product1'
                        - id: 2
                          name: Product 2
                          category_id: 2
                          short_description: Short description 2
                          detailed_description: Detailed description 2
                          product_url: 'https://example.com/product2'
                      page_info:
                        start_cursor: 'eyJpZCI6MX0='
                        end_cursor: 'eyJpZCI6MX0='
                        has_next_page: true
                        has_previous_page: false
                        total_count: 50
                        page: 1
                      
                empty:
                  value:
                    data:
                      products: []
                      page_info:
                        start_cursor: null
                        end_cursor: null
                        has_next_page: false
                        has_previous_page: false
                        total_count: 0
                        page: 1
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
              example:
                value:
                  status: 401
                  errors:
                    - Unauthorized
                    - Please provide a valid authorization token.
                  locations:
                    - products.controller.js
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
              example:
                value:
                  status: 422
                  errors:
                    - Invalid limit value. Limit must be a positive integer.
                    - Invalid cursor value. Cursor must be a base64-encoded string.
                  locations:
                    - products.controller.js
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
              example:
                value:
                  status: 418
                  errors:
                    - I'm a teapot
                  locations:
                    - products.controller.js
    post:
      operationId: postProducts
      tags:
        - products
      summary: >-
        Create a new product (author: @Alona) (tester:@Jany-M) (reviewer:@Iryna,
        @PietroLauria)
      description: >-
        As an admin, I would like to add a new product, so that I could manage a
        product catalogue.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductData'
            examples:
              correctProductData:
                summary: Valid product data input
                value:
                  product_name: RGB keyboard
                  category_id: 12345
                  category_name: Keyboards
                  short_description: Experience seamless typing with this wireless RGB keyboard, featuring customizable backlighting, ergonomic design, and reliable connectivity for a smooth and vibrant typing experience
                  detailed_description: Upgrade your typing experience with this wireless RGB keyboard, combining style and functionality. With customizable RGB lighting, an ergonomic design, and quiet, responsive keys, it ensures a smooth typing experience whether you're working or gaming. Benefit from stable wireless connectivity, extended battery life, and a sleek, vibrant design that enhances any workspace
                  product_photos:
                    - https://example.com/photo1.jpg
                    - https://example.com/photo2.jpg
                  product_url: https://youtu.be/0LE0trd740Q
              wrongCatIdFormat:
                summary: invalid category_id format
                value:
                  product_name: RGB keyboard
                  category_id: 12345n
                  category_name: Keyboards
                  short_description: Experience seamless typing with this wireless RGB keyboard, featuring customizable backlighting, ergonomic design, and reliable connectivity for a smooth and vibrant typing experience
                  detailed_description: Upgrade your typing experience with this wireless RGB keyboard, combining style and functionality. With customizable RGB lighting, an ergonomic design, and quiet, responsive keys, it ensures a smooth typing experience whether you're working or gaming. Benefit from stable wireless connectivity, extended battery life, and a sleek, vibrant design that enhances any workspace
                  product_photos:
                    - https://example.com/photo1.jpg
                    - https://example.com/photo2.jpg
                  product_url: https://youtu.be/0LE0trd740Q
              missingProductName:
                summary: Missing product name
                value:
                  category_id: 12345n
                  category_name: Keyboards
                  short_description: Experience seamless typing with this wireless RGB keyboard, featuring customizable backlighting, ergonomic design, and reliable connectivity for a smooth and vibrant typing experience
                  detailed_description: Upgrade your typing experience with this wireless RGB keyboard, combining style and functionality. With customizable RGB lighting, an ergonomic design, and quiet, responsive keys, it ensures a smooth typing experience whether you're working or gaming. Benefit from stable wireless connectivity, extended battery life, and a sleek, vibrant design that enhances any workspace
                  product_photos:
                    - https://example.com/photo1.jpg
                    - https://example.com/photo2.jpg
                  product_url: https://youtu.be/0LE0trd740Q
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      successObject:
                        $ref: '#/components/schemas/SuccessObject'
                      productObject:
                        $ref: '#/components/schemas/ProductData'
              examples:
                successExample:
                  summary: Success message for product creation
                  value:
                    status: success
                    messages:
                      - Product created
                      - The product can be viewed on the product list
                    id: 2147483647
                    category_id: 123456
                    category_name: "Sample category"
                    product_name: "Sample product"
                    short_description: "Sample description"
                    detailed_description: "Sample long description"
                    product_photos:
                      - 'https://www.youtube.com/photo.jpg'
                      - 'https://www.youtube.com/photo2.jpg'
                    product_url: "https://youtu.be/0LE0trd740Q"
        '400':
          description: Please fill in all the required fields wirh data of approppriate format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
              example:
                value:
                  status: error
                  errors:
                    - Invalid input
                  locations:
                    - products.controller.js
                    - products.db.js
                    - product.services.js
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
              example:
                value:
                  status: error
                  errors:
                    - Unauthorised
                  locations:
                    - products.controller.js
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  '/s5/products/{product_id}/photos':
    post:
      tags:
        - products
      summary: 'Add photos to a product (author: @Alona) (tester: @alberto, @Iryna)'
      description: >-
        As an admin, I would like to optionally add a gallery of up to 5 photos,
        which are up to 1 MB each, to a product for quick visual recognition.
      parameters:
        - in: path
          name: product_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                photos:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  id:
                    type: string
        '401':
          description: Unauthorized
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
    get:
      tags:
        - products
      summary: 'Get photos of a product (author: @Alona)'
      parameters:
        - in: path
          name: product_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  id:
                    type: string
        '401':
          description: Unauthorized
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
components:
  schemas:
    PaginationPage:
      type: integer
      format: int32
      minimum: 1
      maximum: 1000
      description: The page number to retrieve.
    PaginationLimit:
      type: integer
      format: int32
      minimum: 1
      maximum: 100
      description: The number of results per page.
    AdminLog:
      type: object
      properties:
        id:
          type: integer
          format: int32
          minimum: 0
          maximum: 2147483647
          description: Primary key of the log entry.
          readOnly: true
        action_type:
          type: string
          maxLength: 100
          pattern: '^.{0,100}$'
          description: Type of action performed.
        admin_id:
          type: number
          description: ID of the admin who performed the action.
        message_id:
          type: number
          description: 'ID of the associated message, if applicable.'
        action_time:
          type: string
          format: date-time
          maxLength: 20
          description: Timestamp of when the action occurred.
          readOnly: true
        details:
          type: string
          maxLength: 300
          pattern: '^.{0,300}$'
          description: Additional information about the action.
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          maxItems: 1000
          items:
            $ref: '#/components/schemas/ErrorObject'
    AdminData:
      title: Admin
      type: object
      description: Schema for admin registration and management
      properties:
        id:
          type: integer
          format: int32
          readOnly: true
          description: "Unique identifier for the admin"
          minimum: 1
          maximum: 2147483647
        full_name:
          type: string
          minLength: 2
          maxLength: 100
          pattern: '^[a-zA-Z\s.-]*$'
          description: Full name of the administrator
        email:
          type: string
          format: email
          maxLength: 255
          description: Email address of the administrator
        phone:
          type: string
          maxLength: 20
          pattern: '^\+?[1-9]\d{1,14}$'
          description: Phone number in international format
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 72
          pattern: '^[A-Za-z\d@$!%*#?&]*$'
          description: >-
            Admin password - must be at least 8 characters with a mix of letters,
            numbers and symbols
          writeOnly: true
        address:
          type: string
          maxLength: 200
          pattern: '^[a-zA-Z0-9\s.,#-/]*$'
          description: Physical address
        activation_code:
          type: string
          pattern: '^[A-Z0-9]{8}$'
          maxLength: 8
          description: 8-character activation code provided by Galleria owners
        profile_photo:
          type: string
          format: uri
          maxLength: 2048
          description: URL to profile photo
        bio:
          type: string
          maxLength: 500
          pattern: '^[a-zA-Z0-9\s.,!?()-]*$'
          description: Admin biography or description
        created_at:
          type: string
          format: date-time
          maxLength: 32
          description: Timestamp when the admin account was created
          readOnly: true
        deactivated_at:
          type: string
          format: date-time
          nullable: true
          maxLength: 30
          description: Deactivation time, if applicable.
          readOnly: true
      required:
        - full_name
        - email
        - phone
        - password
        - activation_code

    MessageData:
      title: Message
      type: object
      properties:
        id:
          type: integer
          format: int32
          minimum: 0
          maximum: 9999999999
          description: Unique identifier for the message
          readOnly: true
        success:
          type: boolean
          description: A boolean value indicating whether the operation was successful 
        sender_id:
          type: integer
          format: int32
          minimum: 0
          maximum: 5000
          description: Sender id of the message
        recipient_id:
          type: integer
          format: int32
          minimum: 0
          maximum: 5000
          description: Recipient id of the message
        thread:
          type: string
          maxLength: 60
          pattern: '^[a-zA-Z0-9\s,.!?]+$'
          description: Conversation ID for grouping messages
        content:
          type: string
          maxLength: 1000
          pattern: '^[a-zA-Z0-9\s,.!?]+$'
          description: Message's content
        time:
          type: string
          maxLength: 20
          format: date-time
          description: A timestamp in ISO 8601 format representing the date and time the message was sent, in UTC
          readOnly: true
    AdminsListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/AdminData"
          maxItems: 100
        page:
          $ref: "#/components/schemas/PaginationPage"
        limit:
          $ref: "#/components/schemas/PaginationLimit"
        total:
          type: integer
          format: int32
          minimum: 0
          maximum: 100
          description: Total number of administrators available.
    ErrorObject:
      type: object
      properties:
        status:
          type: string
          maxLength: 50
          description: error
        errors:
          type: array
          items:
            type: string
            maxLength: 256
          description: Error messages
          example:
            - invalid
            - not available
        locations:
          type: array
          items:
            type: string
            maxLength: 150
          description: 'Optional: Additional information about the location of each message'
          example:
            - db.js
            - service.js
      required:
        - errors
    SuccessObject:
      type: object
      properties:
        locations:
          type: array
          items:
            type: string
          description: Optional tracking locations related to the data
          example:
            - tracking location optional
        messages:
          type: array
          items:
            type: string
          description: Messages that provide additional information about the response
          example:
            - tracking location optional
      required:
        - messages
    CategoryRequestData:
      title: Category Request
      type: object
      properties:
        title:
          type: string
          description: Title for the category
          maxLength: 30
          pattern: '^.*$'
        photo_url:
          type: string
          description: Photo URL for the category
          maxLength: 300
          pattern: '^.*$'
        description:
          type: string
          description: Description for the category
          maxLength: 300
          pattern: '^.*$'
      required:
        - title
      example:
        title: Food
        photo_url: 'https://url.com/photo.jpg'
        description: This is something you can eat.
    CategoryResponseData:
      title: Category Response
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          maximum: 999
          description: Unique identifier for the category
          readOnly: true
        title:
          type: string
          description: Title for the category
          maxLength: 30
          pattern: '^.*$'
        photo_url:
          type: string
          description: Photo URL for the category
          maxLength: 300
          pattern: '^.*$'
        description:
          type: string
          description: Description for the category
          maxLength: 300
          pattern: '^.*$'
        is_delete:
          type: boolean
          description: Boolean value to indicate whether the category is deleted
      example:
        id: 123
        title: Food
        photo_url: 'https://url.com/photo.jpg'
        description: This is something you can eat.
        is_deleted: false    
    ProductData:
      title: Product
      type: object
      properties:
        id:
          type: number
          description: Unique identifier for the product
          readOnly: true
          nullable: false
          minimum: 0
          maximum: 2147483647
          format: int32
        category_id:
          type: integer
          description: ID of the category the product belongs to
          nullable: false
          minimum: 0
          maximum: 2147483647
          format: int32
        category_name:
          type: string
          description: Name of the category
          maxLength: 100
          minLength: 3
          nullable: true
          pattern: ^[^\n]*$
        product_name:
          type: string
          description: Name of the product
          maxLength: 100
          minLength: 3
          nullable: false
          pattern: ^[^\n]*$
        short_description:
          type: string
          description: Short description of the product
          maxLength: 1000
          minLength: 20
          nullable: false
          pattern: ^[^\n]*$
        product_photos:
          type: array
          nullable: true
          maxItems: 5
          items:
            type: string
            maxLength: 1000
            format: uri
            example: 'https://www.youtube.com/photo.jpg'
        detailed_description:
          type: string
          description: Detailed description of the product
          maxLength: 10000
          nullable: true
          pattern: ^.*$
        product_url:
          type: string
          format: uri
          description: URL to the product page
          nullable: true
          maxLength: 1000
      required:
      - category_id
      - product_name
      - short_description
    PageInfo:
      title: PageInfo
      type: object
      properties:
        has_next_page:
          type: boolean
          description: Indicates if there are more pages available
        end_cursor:
          type: string
          description: Cursor to access the next page of results
          nullable: true
          maxLength: 100
          pattern: ^[^\n]*$
        start_cursor:
          type: string
          description: Cursor to access the previous page of results
          nullable: true
          maxLength: 100
          pattern: ^[^\n]*$
        total_count:
          type: integer
          description: Total number of items in the result set
          nullable: false
          minimum: 0
          maximum: 2147483647
          format: int32
        page:
          type: integer
          description: Current page number
          nullable: false
          minimum: 0
          maximum: 2147483647
          format: int32